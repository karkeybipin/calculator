# Python Basics Tutorial

# Section 1: Variables and Data Types
# ------------------------------------
# Variables store data values

# Integer
import unittest
import re
import datetime
import json
import random
import math
age = 25
print("Age:", age)

# Float
height = 5.9
print("Height:", height)

# String
name = "Bipin"
print("Name:", name)

# Boolean
is_student = True
print("Is Student:", is_student)

# Section 2: Lists
# ----------------
# Lists store multiple items in a single variable

fruits = ["apple", "banana", "cherry"]
print("Fruits:", fruits)

# Accessing list items
print("First fruit:", fruits[0])

# Adding items to the list
fruits.append("orange")
print("Fruits after adding:", fruits)

# Removing an item
fruits.remove("banana")
print("Fruits after removing banana:", fruits)

# Section 3: Tuples
# -----------------
# Tuples are immutable lists

coordinates = (10, 20)
print("Coordinates:", coordinates)

# Accessing tuple items
print("X coordinate:", coordinates[0])

# Section 4: Dictionaries
# -----------------------
# Dictionaries store data in key-value pairs

person = {
    "name": "Bipin",
    "age": 25,
    "country": "Nepal"
}
print("Person Dictionary:", person)

# Accessing dictionary values
print("Name:", person["name"])

# Adding a new key-value pair
person["job"] = "Software Engineer"
print("Updated Person Dictionary:", person)

# Section 5: Conditionals
# -----------------------
# Using if, elif, else for decision-making

x = 10
y = 20

if x < y:
    print("x is less than y")
elif x == y:
    print("x is equal to y")
else:
    print("x is greater than y")

for fruit in fruits:
    print("Fruit:", fruit)

count = 0
while count < 5:
    print("Count:", count)
    count += 1


def greet(name):
    return f"Hello, {name}!"

print(greet("Bipin"))

def add_numbers(a, b):
    return a + b

result = add_numbers(5, 7)
print("Sum of numbers:", result)

class Dog:
    # Constructor
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # Method to return dog's details
    def get_details(self):
        return f"{self.name} is {self.age} years old"


# Creating an instance of the Dog class
dog1 = Dog("Buddy", 3)
print(dog1.get_details())

class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        return f"{self.name} makes a sound"


class Cat(Animal):
    def speak(self):
        return f"{self.name} meows"


animal = Animal("Animal")
cat = Cat("Whiskers")

print(animal.speak())
print(cat.speak())

try:
    num = int(input("Enter a number: "))
    print("You entered:", num)
except ValueError:
    print("Invalid input, please enter a valid number.")

with open("example.txt", "w") as file:
    file.write("Hello, this is a file.\n")

with open("example.txt", "r") as file:
    content = file.read()
    print("File Content:\n", content)

num = 16
print("Square root of 16:", math.sqrt(num))

# Using random module to generate a random number
print("Random number:", random.randint(1, 10))

def add(x, y): return x + y


print("Sum using lambda:", add(2, 3))

numbers = [x for x in range(10)]
print("List of numbers:", numbers)

def count_up_to(max):
    count = 1
    while count <= max:
        yield count
        count += 1


counter = count_up_to(5)
for num in counter:
    print("Generated number:", num)



def decorator_function(original_function):
    def wrapper_function():
        print("Wrapper executed before", original_function.__name__)
        return original_function()
    return wrapper_function


@decorator_function
def display():
    print("Display function ran")


display()

person_dict = {"name": "Bipin", "age": 25, "job": "Software Engineer"}
person_json = json.dumps(person_dict)
print("JSON String:", person_json)

person_data = json.loads(person_json)
print("Python Dictionary from JSON:", person_data)

now = datetime.datetime.now()
print("Current Date and Time:", now)

formatted_date = now.strftime("%Y-%m-%d %H:%M:%S")
print("Formatted Date:", formatted_date)
text = "The rain in Spain stays mainly in the plain."
pattern = r"ain"
matches = re.findall(pattern, text)
print("Matches found:", matches)


def add(a, b):
    return a + b

class TestMathFunctions(unittest.TestCase):
    def test_add(self):
        self.assertEqual(add(2, 3), 5)

if __name__ == "__main__":
    unittest.main()
    
    # Basic Arithmetic and Input
a = int(input("Enter first number: "))
b = int(input("Enter second number: "))

sum_result = a + b
diff_result = a - b
prod_result = a * b
div_result = a / b if b != 0 else "Undefined (division by zero)"

print(f"Sum: {sum_result}")
print(f"Difference: {diff_result}")
print(f"Product: {prod_result}")
print(f"Division: {div_result}")

# String Manipulation
message = "Hello, World!"
print("Uppercase:", message.upper())
print("Lowercase:", message.lower())
print("First character:", message[0])
print("Last character:", message[-1])
print("Slice (2-5):", message[2:5])
reversed_message = message[::-1]
print("Reversed message:", reversed_message)

# List Operations
numbers = [1, 2, 3, 4, 5]
numbers.append(6)
print("After appending:", numbers)
numbers.remove(3)
print("After removing 3:", numbers)
numbers.sort(reverse=True)
print("Sorted in reverse:", numbers)
squares = [x ** 2 for x in numbers]
print("Squares:", squares)

# Tuple Unpacking
point = (10, 20)
x, y = point
print(f"x: {x}, y: {y}")

person_info = ("Bipin", 25, "Nepal")
name, age, country = person_info
print(f"Name: {name}, Age: {age}, Country: {country}")

# Dictionary Operations
student = {
    "name": "Bipin",
    "age": 25,
    "subjects": ["Math", "Science", "English"]
}
student["grade"] = "A"
print("Updated student:", student)

for key, value in student.items():
    print(f"{key}: {value}")
print("Subjects:", student["subjects"])

# Nested Loops
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
for row in matrix:
    for item in row:
        print(item, end=" ")
    print()

# Functions with Default Parameters
def introduce(name, age=25):
    print(f"My name is {name} and I am {age} years old.")

introduce("Bipin")
introduce("John", 30)

# Recursive Function (Factorial)
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

print("Factorial of 5:", factorial(5))

# Class with Class Variables
class Employee:
    company = "Tech Company"

    def __init__(self, name, salary):
        self.name = name
        self.salary = salary

    def display(self):
        print(f"{self.name} works at {Employee.company} and earns {self.salary}")

emp1 = Employee("Alice", 50000)
emp2 = Employee("Bob", 60000)
emp1.display()
emp2.display()

# Static Methods in Classes
class MathOperations:
    @staticmethod
    def add(a, b):
        return a + b

    @staticmethod
    def subtract(a, b):
        return a - b

print("Addition:", MathOperations.add(5, 3))
print("Subtraction:", MathOperations.subtract(10, 7))

# Try-Except for Multiple Exceptions
try:
    num = int(input("Enter a number: "))
    result = 10 / num
    print(f"Result: {result}")
except ValueError:
    print("Invalid input, not a number.")
except ZeroDivisionError:
    print("Cannot divide by zero.")

# File Handling (Read and Write)
with open("sample.txt", "w") as file:
    file.write("This is a sample text.")

with open("sample.txt", "r") as file:
    content = file.read()
    print("File content:", content)

# Using Lambda with map
numbers = [1, 2, 3, 4]
squares = list(map(lambda x: x ** 2, numbers))
print("Squares using map and lambda:", squares)

# Using Lambda with filter
numbers = [5, 8, 12, 15, 20]
even_numbers = list(filter(lambda x: x % 2 == 0, numbers))
print("Even numbers:", even_numbers)

# Using Zip Function
names = ["Alice", "Bob", "Charlie"]
ages = [25, 30, 35]
combined = zip(names, ages)
for name, age in combined:
    print(f"{name} is {age} years old")

# Simulating Dice Rolls with Random
import random

def roll_dice():
    return random.randint(1, 6)

for _ in range(5):
    print(f"Dice rolled: {roll_dice()}")

# Prime Number Check
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

number = 29
print(f"Is {number} a prime number? {is_prime(number)}")

# Palindrome Check
def is_palindrome(s):
    return s == s[::-1]

word = "madam"
print(f"Is '{word}' a palindrome? {is_palindrome(word)}")
